import enum
import typing

import numpy

class VideoCaptureAPIs(enum.Enum):
    CAP_ANY = ...

CAP_ANY = VideoCaptureAPIs.CAP_ANY

class VideoCaptureProperties(enum.Enum):
    CAP_PROP_POS_MSEC = ...
    CAP_PROP_POS_FRAMES = ...
    CAP_PROP_POS_AVI_RATIO = ...
    CAP_PROP_FRAME_WIDTH = ...
    CAP_PROP_FRAME_HEIGHT = ...
    CAP_PROP_FPS = ...
    CAP_PROP_FOURCC = ...
    CAP_PROP_FRAME_COUNT = ...

CAP_PROP_POS_MSEC = VideoCaptureProperties.CAP_PROP_POS_MSEC
CAP_PROP_POS_FRAMES = VideoCaptureProperties.CAP_PROP_POS_FRAMES
CAP_PROP_POS_AVI_RATIO = VideoCaptureProperties.CAP_PROP_POS_AVI_RATIO
CAP_PROP_FRAME_WIDTH = VideoCaptureProperties.CAP_PROP_FRAME_WIDTH
CAP_PROP_FRAME_HEIGHT = VideoCaptureProperties.CAP_PROP_FRAME_HEIGHT
CAP_PROP_FPS = VideoCaptureProperties.CAP_PROP_FPS
CAP_PROP_FOURCC = VideoCaptureProperties.CAP_PROP_FOURCC
CAP_PROP_FRAME_COUNT = VideoCaptureProperties.CAP_PROP_FRAME_COUNT

class VideoCapture:
    @typing.overload
    def __init__(
        self, filename: str, apiPreference: VideoCaptureAPIs = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, index: int, apiPreference: VideoCaptureAPIs = ...
    ) -> None: ...
    def __init__(self) -> None: ...
    def get(self, propid: VideoCaptureProperties) -> float: ...
    def read(self) -> typing.Tuple[bool, numpy.ndarray]: ...
    def release(self) -> None: ...
    def set(self, prodid: VideoCaptureProperties, value: float) -> bool: ...
