import enum
import typing

import numpy

class WindowFlags(enum.Enum):
    WINDOW_NORMAL = ...
    WINDOW_AUTOSIZE = ...
    WINDOW_FULLSCREEN = ...
    WINDOW_FREERATIO = ...
    WINDOW_KEEPRATIO = ...
    WINDOW_GUI_EXPANDED = ...
    WINDOW_GUI_NORMAL = ...

WINDOW_NORMAL = WindowFlags.WINDOW_NORMAL
WINDOW_AUTOSIZE = WindowFlags.WINDOW_AUTOSIZE
WINDOW_FULLSCREEN = WindowFlags.WINDOW_FULLSCREEN
WINDOW_FREERATIO = WindowFlags.WINDOW_FREERATIO
WINDOW_KEEPRATIO = WindowFlags.WINDOW_KEEPRATIO
WINDOW_GUI_EXPANDED = WindowFlags.WINDOW_GUI_EXPANDED
WINDOW_GUI_NORMAL = WindowFlags.WINDOW_GUI_NORMAL

class WindowPropertyFlags(enum.Enum):
    WND_PROP_FULLSCREEN = ...
    WND_PROP_AUTOSIZE = ...
    WND_PROP_ASPECT_RATIO = ...
    WND_PROP_VISIBLE = ...
    WND_PROP_TOPMOST = ...

WND_PROP_FULLSCREEN = WindowPropertyFlags.WND_PROP_FULLSCREEN
WND_PROP_AUTOSIZE = WindowPropertyFlags.WND_PROP_AUTOSIZE
WND_PROP_ASPECT_RATIO = WindowPropertyFlags.WND_PROP_ASPECT_RATIO
WND_PROP_VISIBLE = WindowPropertyFlags.WND_PROP_VISIBLE
WND_PROP_TOPMOST = WindowPropertyFlags.WND_PROP_TOPMOST

TrackbarCallback = typing.Callable[[int], None]

def createTrackbar(
    trackbarname: str, winname: str, value: int, count: int, onChange: TrackbarCallback
) -> int: ...
def getTrackbarPos(trackbarname: str, winname: str) -> int: ...
def imshow(winname: str, mat: numpy.ndarray) -> None: ...
def namedWindow(winname: str) -> None: ...
def setTrackbarMin(trackbarname: str, winname: str, minval: int) -> None: ...
def setTrackbarPos(trackbarname: str, winname: str, pos: int) -> None: ...
def setWindowProperty(
    winname: str,
    prop_id: WindowPropertyFlags,
    prop_value: typing.Union[WindowFlags, float],
) -> None: ...
def waitKey(delay: int = ...) -> int: ...
